>>>html
<div
  class="d-flex justify-content-between align-items-center"
>
  <div class="pb-4" style="width: 468px;">
    <div class="font-size-15 font-color-dark font-family-bold mb-2">
      {{ 'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.LABEL' | translate}}
    </div>
    <app-dynamic-select
      #dynamicSelector="ngModel"
       
      [dataGetter]="getSupplierProducts"
      [itemGetterById]="getProductById"
      additionalSearchKey="barcode"
      [showClearButton]="false"
      [multiple]="true"
      [closeOnSelect]="false"
      [showLabel]="false"
      [(ngModel)]="selectedProductIds"
      [ngModelOptions]="{ standalone: true }"
    ></app-dynamic-select>
    <!-- (change)="addProductToOrderr($event)" -->
    <!-- [disabled]="hasSelectAll && isSelectedAll" -->
  </div>
  <div
    *ngIf="productsDataSource && !productsDataSource[0]?.placeholder"
    class="pr-3 d-flex align-items-center w-100 justify-content-end"
    style="max-width: 468px;"
  >
    <span class="font-family-regular font-size-14 text-dark pr-2"
      >
      {{ 'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.TOTAL_UNIT_COST' | translate}}:
    </span>
    <span class="font-family-bold text-dark font-size-18 text-truncate">{{
      totalUnitCost | number: '1.4-4':'en'
    }} ₾</span>
  </div>
</div>
<app-table
  [dataSource]="productsDataSource"
  [totalCount]="productsDataSource.length"
  [selectable]="false"
  [filterable]="false"
  [paginable]="false"
  [indexable]="true"
  [displayedColumns]="displayedColumns"
  [staticData]="true"
  class="table-add-order first-th-centered"
  [class.disabled]="productsDataSource && productsDataSource[0]?.placeholder"
>
  <ng-template app-cell let-cell="cell" let-row="row" name="name">
    <div class="pt-1 line-height-normal">
      <span
        [matTooltip]="row.name"
        class="font-family-bold text-truncate mw-100 d-inline-block table-text-dark pb-1"
      >
        {{ row.name }}
      </span>
      <br>
      <span
        [matTooltip]="row.barcode"
        class="text-truncate mw-100 d-inline-block table-text-dark"
      >
        {{ row.barcode }}
      </span>
    </div>
  </ng-template>
  <ng-template app-cell let-row="row" name="quantity">
    <div class="text-truncate text-right">
      <span class="align-middle d-inline-block" style="min-width: 36px;">
        <ng-container *ngIf="!row.placeholder">
          {{ row.quantity | number: '1.4-4':'en' }}
          {{getUMOAcronym(row.unitOfMeasurement)}}
        </ng-container>
        <ng-container *ngIf="row.placeholder">
          {{ row.quantity }}
        </ng-container>
      </span>
    </div>
  </ng-template>

  <ng-template app-cell let-row="row" name="unitCost">
    <input
      *ngIf="editable && !row.placeholder"
      #unitCost="ngModel"
      type="text"
      autocomplete="off"
      required
      appMoreThan="0"
      [ngModel]="row.unitCost.toString()"
      (change)="row.unitCost = parseFloatWithCommas($event.target.value)"
      class="form-control text-center"
      style="width: 89px;"
      mask="separator.4"
      thousandSeparator=","
    />
    <div class="text-right" *ngIf="!editable && !row.placeholder">
      {{ row.unitCost | number: '1.4-4':'en' }}
    </div>
    <div class="text-right" *ngIf="row.placeholder">
      {{ row.unitCost }}
    </div>
  </ng-template>
  <ng-template app-cell let-row="row" name="orderedQuantity">
    <input
      *ngIf="editable && !row.placeholder"
      #orderedQuantity="ngModel"
      type="text"
      autocomplete="off"
      required
      appMoreThan="0"
      [ngModel]="row.orderedQuantity.toString()"
      (change)="row.orderedQuantity = parseFloatWithCommas($event.target.value)"
      class="form-control text-center mx-auto"
      style="width: 89px;"
      mask="separator.4"
      thousandSeparator=","
    />
    <div class="text-right" *ngIf="!editable">
      {{ row.orderedQuantity }}
    </div>
    <div class="text-right" *ngIf="row.placeholder">
      {{ row.orderedQuantity }}
    </div>
  </ng-template>
  <ng-template app-cell let-row="row" name="totalCost">
    <div class="d-flex justify-content-end">
      <span class="text-truncate"  >
        <ng-container *ngIf="!row.placeholder">
          {{ row.unitCost * row.orderedQuantity | number: '1.4-4':'en' }} ₾
        </ng-container>
        <ng-container *ngIf="row.placeholder">
          {{ row.totalCost }}
        </ng-container>
      </span>
    </div>
  </ng-template>
  <ng-template app-cell let-row="row" name="id">
    <div class="d-flex w-100 justify-content-end">

      <app-icon
      *ngIf="editable"
      [matTooltip]="'GENERAL.DELETE' | translate"
      icon="trash-tbls"
      fill="#515366"
      (click)="onRemoveProduct(row)"
      style="cursor: pointer;"
       
    >
    </app-icon>

    </div>
    
  </ng-template>
</app-table>


>>>> ts
import {
  ChangeDetectionStrategy,
  Component,
  EventEmitter,
  Input,
  Output,
  ViewChild,
  ViewChildren,
  QueryList,
  ChangeDetectorRef,
} from '@angular/core';
import { ColumnData, ColumnType } from '@optimo/ui-table';
import { DynamicSelectComponent } from '@optimo/ui-dynamic-select';
import { MonoTypeOperatorFunction, Observable, of } from 'rxjs';
import { HttpParams } from '@angular/common/http';
import { ClientService } from '@optimo/core';
import { remove, sumBy, uniqBy } from 'lodash-es';
import { tap } from 'rxjs/operators';
import { EditModes } from '../../../../../core/enums/edit-modes.enum';
import { StockItemStatuses } from '../../../../../core/enums/stockitem-status.enum';
import { AbstractControl, ControlValueAccessor, NgModel, ValidationErrors, Validator, Validators } from '@angular/forms';
import { NumberColumnType } from '@optimo/ui-table';
import { getUMOAcronym } from 'apps/dashboard/src/app/core/enums/measurement-units.enum';

export interface IOrderLine {
  stockItemId: number;
  orderedQuantity: number;
  expectedUnitCost: number;
  unitPrice?: number;
}

@Component({
  selector: 'app-add-order-lines',
  templateUrl: './add-order-lines.component.html',
  styleUrls: ['./add-order-lines.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class AddOrderLinesComponent implements ControlValueAccessor, Validator{
  getUMOAcronym = getUMOAcronym;
  @ViewChild('dynamicSelector', { static: true })
  dynamicSelector: NgModel;

  @ViewChild(DynamicSelectComponent, { static: true })
  supplierProductsSelector: DynamicSelectComponent;

  @ViewChildren('unitCost')
  unitCostInputs: QueryList<any>;

  @ViewChildren('orderedQuantity')
  orderedQuantityInputs: QueryList<any>;

  private _supplierId: number;

  @Input()
  set supplierId(value: number) {
    this._supplierId = value;

    this.selectedProductIds = [];
    this.reloadDynamicSelector();
  }

  get supplierId(): number {
    return this._supplierId;
  }

  private _orderLines: any[];

  @Input()
  set orderLines(value: any[]) {
    this._orderLines = value;
    if (value) {
      this.selectedProductIds = value.map((o) => o.stockItemId);
    }
  }

  get orderLines(): any[] {
    return this._orderLines;
  }

  @Input()
  editable: boolean;

  @Output()
  changeOrderLines = new EventEmitter<any[]>();

  private _selectedProductIds: any[];

  set selectedProductIds(value: any[]) {
    this._selectedProductIds = value;
    this.fillProductsDataSource();
  }

  get selectedProductIds(): any[] {
    return this._selectedProductIds;
  }

  private supplierProducts: any[] = [];

  editModes = EditModes;
  private tablePlaceholder = [];
  productsDataSource: any[];
  displayedColumns: ColumnData[] = [
    {
      dataField: 'name',
      columnType: ColumnType.Text,
      caption: 'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.TABLE_COLUMNS.TITLE',
      filterable: false,
      sortable: false,
      widthCoefficient: 1.7,
    },
    {
      dataField: 'quantity',
      columnType: ColumnType.Number,
      caption: 'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.TABLE_COLUMNS.QUANTITY',
      data: {
        type: NumberColumnType.Quantity,
      },
      filterable: false,
      sortable: false,
    },
    {
      dataField: 'unitCost',
      columnType: ColumnType.Number,
      caption: 'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.TABLE_COLUMNS.UNIT_COST',
      data: { type: NumberColumnType.Decimal, digitsAfterDot: 4 },
      filterable: false,
      sortable: false,
    },
    {
      dataField: 'orderedQuantity',
      columnType: ColumnType.Number,
      caption:
        'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.TABLE_COLUMNS.ORDERED_QUANTITY',
      data: { type: NumberColumnType.Decimal },
      filterable: false,
      sortable: false,
    },
    {
      dataField: 'totalCost',
      columnType: ColumnType.Number,
      caption: 'ORDERS.ITEM.DETAILS.STOCKITEMS_LIST.TABLE_COLUMNS.TOTAL_COST',
      data: { type: NumberColumnType.Decimal, digitsAfterDot: 4 },
      filterable: false,
      sortable: false,
    },
    {
      dataField: 'id',
      columnType: ColumnType.Text,
      caption: '',
      filterable: false,
      sortable: false,
    },
  ];

  // instance variables for form control
  onChange: (orderLines: IOrderLine[]) => void;
  onTouched: () => void;
  disabled: boolean;

  constructor(private client: ClientService, private cdr: ChangeDetectorRef) {}

  validate(control: AbstractControl): ValidationErrors | null {
    console.log('dev => AddOrderLinesComponent => validate, control:', control);
    return null;
  }

  writeValue(orderLines: IOrderLine[]): void {
    console.log('updated values programatically')
    console.error('not implemented');
  }

  registerOnChange(fn: (_: any) => void): void {
    this.onChange = fn;
  }

  registerOnTouched(fn: any): void {
    this.onTouched = fn;
  }

  setDisabledState?(isDisabled: boolean): void {
    this.disabled = isDisabled;
  }

  get totalUnitCost(): number {
    return sumBy(
      this.productsDataSource,
      (product) => product.unitCost * product.orderedQuantity
    );
  }

  private fillProductsDataSource(): void {
    let selectedProducts =
      (this.selectedProductIds &&
        this.selectedProductIds
          .map((id) => {
            const productToAdd = this.supplierProducts.find(
              (product) => product.id === id
            );
            return (
              productToAdd && {
                stockItemId: productToAdd.id,
                name: productToAdd.name,
                barcode: productToAdd.barcode,
                quantity: productToAdd.quantity,
                unitCost: productToAdd.lastUnitCost,
                unitOfMeasurement: productToAdd.unitOfMeasurement,
                orderedQuantity: '',
                totalCost: '',
              }
            );
          })
          .filter((v) => v)) ||
      [];
    console.log('TCL: AddOrderComponent -> selectedProducts', selectedProducts);

    if (this.orderLines) {
      const orderLines = this.orderLines.map((order) => ({
        orderId: order.id,
        stockItemId: order.stockItemId,
        name: order.stockItemName,
        quantity: order.orderedQuantity,
        unitCost: order.expectedUnitCost,
        orderedQuantity: order.orderedQuantity,
        receivedUnitCost: order.expectedUnitCost,
      }));

      selectedProducts = selectedProducts.map((product) => {
        const order = orderLines.find(
          (o) => o.stockItemId === product.stockItemId
        );
        if (order) {
          return { ...product, ...order };
        }
        return product;
      });
    }
    const data = selectedProducts.map((product) => {
      return (
        this.productsDataSource.find(
          (p) => p.stockItemId === product.stockItemId
        ) || product
      );
    });

    this.productsDataSource = data.length ? data : this.tablePlaceholder;
    this.changeOrderLines.emit(data);
  }

  onRemoveProduct(row: any): void {
    if (row.placeholder) {
      return;
    }
    remove(this.selectedProductIds, (r: any) => r === row.stockItemId);
    this.selectedProductIds = [...this.selectedProductIds];
  }

  private reloadDynamicSelector(): void {
    if (this.supplierProductsSelector) {
      this.supplierProductsSelector.reload();
    }
  }

  getSupplierProducts = (state: any): Observable<any> => {
    if (!this.supplierId) {
      return of({ totalCount: 0, data: [] });
    }
    console.log(
      'TCL: AddOrderLinesComponent -> constructor -> this.supplierId',
      this.supplierId
    );
    let params = new HttpParams({
      fromObject: {
        sortField: 'name',
        sortOrder: 'ASC',
        pageIndex: state.pageIndex,
        pageSize: state.pageSize,
        status: [
          StockItemStatuses.Enabled.toString(),
          StockItemStatuses.Disabled.toString(),
        ],
      },
    });
    if (state.searchValue) {
      params = params.append('barcodeOrName', state.searchValue);
    }

    return this.client
      .get(`suppliers/${this.supplierId}/stockitems`, { params })
      .pipe(this.tap);
  };

  getProductById = (id: number): Observable<any> => {
    if (typeof id !== 'number') {
      return of();
    }
    return this.client.get(`stockitems/${id}`).pipe(this.tap);
  };

  private get tap(): MonoTypeOperatorFunction<unknown> {
    return tap((items: any) => {
      items = items.data || [items];
      if (items) {
        this.supplierProducts = uniqBy(
          [...this.supplierProducts, ...items],
          'id'
        );
        this.fillProductsDataSource();
      }
    });
  }

  parseFloatWithCommas(value: string): number {
    return Number.parseFloat(value.replace(/,/g, ''));
  }

  public markFormGroupTouched(): void {
    console.log('this.unitCostInputs', this.unitCostInputs);
    this.unitCostInputs.forEach((model: NgModel) => {
      model.control.markAllAsTouched();
    });
    this.orderedQuantityInputs.forEach((model: NgModel) => {
      model.control.markAllAsTouched();
    });
    if (!this.selectedProductIds || !this.selectedProductIds.length) {
      this.dynamicSelector.control.setValidators(Validators.required);
      this.dynamicSelector.control.updateValueAndValidity();
    }
    this.cdr.markForCheck();
  }
}
